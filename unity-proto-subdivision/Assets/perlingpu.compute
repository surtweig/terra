// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel kPerlin
#pragma kernel kFBM
#define threadGroupSize 128

struct PointInput
{
	float3 pos;
};

struct PerlinOutput
{
	float val;
};

RWStructuredBuffer<PointInput> points;
RWStructuredBuffer<PerlinOutput> values;
	
/*static int permutation[512] = {
	151,160,137,91,90,15,
	131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,
	151,160,137,91,90,15,
	131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180  
};*/

static uint permutation4[64] = {
1535746199, 226692954, 895508425, 3775392194, 510076044, 1661505093, 169209893, 2483469847,
1273657591, 1053104640, 3420191838, 537600885, 1478603065, 1463326189, 2289898670, 2940512427,
2252842314, 2786799755, 3885929037, 2061856595, 3867530044, 693922268, 687156791, 915367668,
2705267009, 1230034945, 3146009809, 2836552144, 2189935816, 1453309044, 3329057956, 1073986221,
4209170740, 3389356924, 2121700134, 3562361599, 3812347599, 289017903, 706526646, 3584735199,
43579511, 1185126956, 2607127005, 162278311, 4247197313, 1852596755, 3907023183, 1752218034,
3831625434, 3253871355, 210817774, 4053971903, 3952161617, 1810829049, 534167601, 2641020853,
2966181048, 758282611, 4271244415, 1573776522, 490959582, 2381531160, 1112458112, 3030138327
};
	
float fade (float t)
{
	return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}
	
float grad (int hash, float x, float y, float z)
{
	int h = hash & 15;
	float u = h<8 ? x : y;
	float v = h<4 ? y : h==12||h==14 ? x : z;
	return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);
}

uint p4i (uint index)
{
	uint u = index / 4;
	uint b = index % 4;
	return (permutation4[u] & (255 << b*8)) >> b*8;
}
	
float perlin (float3 p)
{

	uint3 i = uint3( ((uint)p.x) & 255, ((uint)p.y) & 255, ((uint)p.z) & 255 );
	float3 f = p-floor(p);
	
	float u = fade(f.x);
	float v = fade(f.y);
	float w = fade(f.z);
	
	uint A  = (p4i(i.x) + i.y) & 255;//(permutation[i.x]+i.y) & 255;
	uint AA = (p4i(A) + i.z) & 255;//(permutation[A]+i.z) & 255;
	uint AB = (p4i(A+1) + i.z) & 255;//(permutation[A+1]+i.z) & 255;
	uint B  = (p4i(i.x+1) + i.y) & 255;//(permutation[i.x+1]+i.y) & 255;
	uint BA = (p4i(B) + i.z) & 255;//(permutation[B]+i.z) & 255;
	uint BB = (p4i(B+1) + i.z) & 255;//(permutation[B+1]+i.z) & 255;
	
	return lerp(lerp(lerp(grad(p4i(AA), f.x  , f.y  , f.z   ),  
                          grad(p4i(BA), f.x-1.0, f.y  , f.z   ),
						  u), 
                     lerp(grad(p4i(AB), f.x  , f.y-1.0, f.z   ),  
                          grad(p4i(BB), f.x-1.0, f.y-1.0, f.z   ),
						  u),
					 v),
                lerp(lerp(grad(p4i(AA+1), f.x  , f.y  , f.z-1.0 ),  
                          grad(p4i(BA+1), f.x-1.0, f.y  , f.z-1.0 ),
						  u), 
                     lerp(grad(p4i(AB+1), f.x  , f.y-1.0, f.z-1.0 ),
                          grad(p4i(BB+1), f.x-1.0, f.y-1.0, f.z-1.0 ),
						  u),
				     v),
				w);	
}

float fbm (float3 p, int octaves, float persistence)
{
	float v = 0.0;
	float3 t = p;
	
	for (int octave = 0; octave < octaves; octave++)
	{
		v += perlin(t)*pow(2.0, -octave*persistence);
		t *= 2.0;
	}
	
	return v;
}

[numthreads(threadGroupSize,1,1)]
void kPerlin (uint3 id : SV_DispatchThreadID)
{
	values[id.x].val = perlin(points[id.x].pos);
}

[numthreads(threadGroupSize,1,1)]
void kFBM (uint3 id : SV_DispatchThreadID)
{
	values[id.x].val = fbm(points[id.x].pos, 12, 0.5);
}
