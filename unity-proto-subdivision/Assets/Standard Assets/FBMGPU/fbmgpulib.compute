#include "fbmgpubase.cginc"

#pragma kernel k_Zero
#pragma kernel k_One
#pragma kernel k_FBM

#pragma kernel k_Hybrid
#pragma kernel k_Turbulence
#pragma kernel k_FBMAbs
#pragma kernel k_HybridAbs
#pragma kernel k_FBMAbsGamma

#pragma kernel k_DomainWarping
#pragma kernel k_DomainWarping2D
#pragma kernel k_MaxMin
#pragma kernel k_OaxoaSubtractive
#pragma kernel k_Bailout

int iterations;


KERNEL(Zero);
KERNEL(One);
KERNEL(FBM)


float Hybrid (float3 p, int octaves, SPECTRUM spectrum)
{
	float3 t = p;
	float v = (0.8+perlin(p));//(1.0 - abs(perlin(p)));
	float w = v;
	
	for (int octave = 1; octave < octaves; octave++)
	{
		if (w > 1.0) w = 1.0;
		
		float a = 0.8+perlin(t) * spectrum[octave];
		v += w*a;
		w *= a;
		t *= 2.0;
	}
	
	return v;
} KERNEL(Hybrid)



float HybridAbs (float3 p, int octaves, SPECTRUM spectrum)
{
	float3 t = p;
	float v = 0.2+abs(perlin(p));
	float w = v;
	
	for (int octave = 1; octave < octaves; octave++)
	{
		if (w > 1.0) w = 1.0;
		
		float a = (0.2+abs(perlin(t))) * spectrum[octave];
		v += w*a;
		w *= a;
		t *= 2.0;
	}
	
	return v;
} KERNEL(HybridAbs)



float Turbulence (float3 p, int octaves, SPECTRUM spectrum)
{
	float v = 0.0;
	float3 t = p;
	
	for (int octave = 0; octave < octaves; octave++)
	{
		v += abs(perlin(t))*spectrum[octave];
		t *= 2.0;
	}
	
	return v;
} KERNEL(Turbulence)



float FBMAbs (float3 p, int octaves, SPECTRUM spectrum)
{
	return abs(FBM(p, octaves, spectrum));
} KERNEL(FBMAbs)



float FBMAbsGamma (float3 p, int octaves, SPECTRUM spectrum, float gamma)
{
	return pow(abs(FBM(p, octaves, spectrum)), gamma);
} KERNEL_P1(FBMAbsGamma, gamma)



float OaxoaSubtractive (float3 p, int octaves, SPECTRUM spectrum, int iterations)
{
	float v = 0.7+FBM(p, octaves, spectrum);
	
	for (int i = 0; i < iterations; i++)
		v = abs(v-(0.7+FBM(p + 10.0*float3(i+1, i+1, i+1), octaves, spectrum)));
	return v;
} KERNEL_P1(OaxoaSubtractive, iterations)



float DomainWarping (float3 p, int octaves, SPECTRUM spectrum, int iterations)
{
	float3 v = p;
	float3 offset = float3(0.315, 1.781, 3.917);
	
	for (int i = 0; i < iterations; i++)
	{
		v = float3( FBM(4.0*v + offset*(i+1), octaves, spectrum), FBM(4.0*v + 2.0*offset*(i+1), octaves, spectrum), FBM(4.0*v + 3.0*offset*(i+1), octaves, spectrum) );
	}
	return FBM(p + v, octaves, spectrum);
} KERNEL_P1(DomainWarping, iterations)



float DomainWarping2D (float3 p, int octaves, SPECTRUM spectrum, int iterations)
{
	float3 v = p;
	float3 offset = float3(0.315, 1.781, 3.917);
	
	for (int i = 0; i < iterations; i++)
	{
		v = float3( FBM(4.0*v + offset*(i+1), octaves, spectrum), FBM(4.0*v + 2.0*offset*(i+1), octaves, spectrum), v.z );
	}
	return FBM(p + v, octaves, spectrum);
} KERNEL_P1(DomainWarping2D, iterations)



float MaxMin (float3 p, int octaves, SPECTRUM spectrum, int iterations)
{
	float v = 0.0;
	float3 t = p;
	for (int i = 0; i < iterations; i++)
	{
		float f = FBM(t, octaves, spectrum);
		if (v < 0.0)
		{
			if (f < v)
				v = f;
		}
		else
		{
			if (f > v)
				v = f;
		}
		t += 10.0*float3(0.315, 1.781, 3.917);
	} 
	return sign(v)*pow(abs(v), gamma);
} KERNEL_P1(MaxMin, iterations)



float Bailout (float3 p, int octaves, SPECTRUM spectrum, int iterations)
{
	float3 t = p;
	for (int i = 0; i < iterations; i++)
	{
		t += FBMVector(t, octaves, spectrum);
	}
	return length(t-p);
} KERNEL_P1(Bailout, iterations)