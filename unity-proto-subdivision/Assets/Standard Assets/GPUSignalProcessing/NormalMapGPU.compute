#define THREADGROUPSIZE 16

#pragma kernel k_NormalMap3x3

RWStructuredBuffer<float3> InputSignal;
RWStructuredBuffer<float3> OutputSignal;

int InputSampleSize;
int OutputSampleSize;
int TexWidth;
int ChunkWidth;

[numthreads(THREADGROUPSIZE,THREADGROUPSIZE,1)]
void k_NormalMap3x3(uint3 id : SV_DispatchThreadID)
{
	int inpos = id.x + 1 + (id.y+1)*(ChunkWidth+2);
	int outpos = id.x + id.y*ChunkWidth;
	
	//OutputSignal[outpos] = InputSignal[inpos];
	
	int dY = ChunkWidth+2;
	int dX = 1;
	float nscale = 10.0;
	
	float3 n = float3(0.0, 0.0, 0.0);

	// newell
	
	float3 verts[9];
	
	// 0 1 2
  	// 7 8 3
	// 6 5 4
	
	verts[0] = InputSignal[inpos - dX - dY];
	verts[1] = InputSignal[inpos - dY];
	verts[2] = InputSignal[inpos + dX - dY];

	verts[7] = InputSignal[inpos - dX];
	verts[8] = InputSignal[inpos];
	verts[3] = InputSignal[inpos + dX];

	verts[6] = InputSignal[inpos - dX + dY];
	verts[5] = InputSignal[inpos - 0  + dY];
	verts[4] = InputSignal[inpos + dX + dY];
	
	for (uint v = 0; v < 9; v++)
	{
		uint vnext = (v+1) % 9;
		n.x += ( verts[v].y - verts[vnext].y ) * ( verts[v].z + verts[vnext].z );
		n.y += ( verts[v].z - verts[vnext].z ) * ( verts[v].x + verts[vnext].x );
		n.z += ( verts[v].x - verts[vnext].x ) * ( verts[v].y + verts[vnext].y );
	}	
	
	if (dot(n, normalize(verts[8])) < 0.0)
		n = -n;
	
	OutputSignal[outpos] = normalize(n);
}